{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","components/card.js","components/cardList.js","components/searchBox.js","components/scroll.js","components/errorBoundry.js","constants.js","components/hearder.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","this","props","name","id","email","className","src","alt","React","Component","CardList","robots","map","robot","SearchBox","searchHandler","style","textAlign","fontSize","margin","type","backgroundColor","borderRadius","placeholder","onChange","Scroll","overflowY","height","children","ErrorBoundry","state","hasError","error","info","setState","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Header","console","log","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","padding","connect","searchFieldState","robotsState","dispatch","event","text","target","value","payload","fetch","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.660d7e65.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport './card.css'\r\n\r\nclass Card extends React.Component{\r\n  render(){\r\n    const {name, id, email} = this.props\r\n    return(\r\n      <div>\r\n        <div className=\"robohash\" >\r\n          <p>Name: {name}</p> \r\n          <img src= {`https://robohash.org/${id}?200x200`}  alt={`${id}`} />\r\n          <p>Email:{email} </p>  \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './card';\r\nimport \"./cardList.css\"\r\n\r\nclass CardList extends React.Component{\r\n  \r\n  render(){\r\n    return (\r\n      <div >\r\n        <div className=\"container\">\r\n          {this.props.robots.map((robot)=>{\r\n            return (\r\n              <Card \r\n              name={robot.name} \r\n              email ={robot.email} \r\n              id={robot.id} \r\n              key={robot.id} \r\n              />\r\n            )\r\n        })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default CardList","import React from 'react'\r\n\r\nfunction SearchBox({searchHandler}){\r\n\r\n  const searchStyle = {\r\n    textAlign:'center',\r\n    fontSize: '1.8em',\r\n    margin: '10px',\r\n  }\r\n\r\n  const searchStyle2 = {\r\n    backgroundColor:\"#cccccc\",\r\n    borderRadius: '5px'\r\n  }\r\n\r\n  return(\r\n    <div style={searchStyle} >\r\n      <input type=\"search\" \r\n      style={searchStyle2}\r\n      name=\"searchbox\" \r\n      id=\"searchbox\" \r\n      placeholder= \"Search robots.....\"\r\n      onChange={searchHandler} />\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nclass Scroll extends React.Component{\r\n\r\n  render(){\r\n    return (\r\n      <div style={{overflowY:\"scroll\", height:'500px'}} >\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Scroll","import React from \"react\";\r\n\r\nclass ErrorBoundry extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({hasError:true})\r\n  }\r\n\r\n  render(){\r\n    if (this.state.hasError){\r\n      return <h1>Ooops!!! that is not good</h1>\r\n    } else return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n  shouldComponentUpdate(){\r\n    return false;\r\n  }\r\n\r\n  render(){\r\n    console.log(\"Header\")\r\n    return (\r\n    <div>\r\n      <h1 style={{textAlign:'center'}}>ROBOFRIENDS</h1>\r\n    </div> \r\n    )\r\n  }\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport CardList from '../components/cardList';\r\nimport SearchBox from '../components/searchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/scroll';\r\nimport ErrorBoundry from '../components/errorBoundry';\r\nimport { requestRobots, setSearchField } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../components/hearder';\r\n\r\nconst mapStateToProps = state =>{\r\n  return{\r\n    searchField: state.searchFieldState.searchField,\r\n    robots: state.robotsState.robots,\r\n    isPending: state.robotsState.isPending,\r\n    error: state.robotsState.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: ()=>dispatch(requestRobots()) /* requestRobots(dispatch)   ---> This will work too*/\r\n  }\r\n}\r\n\r\nclass App extends React.Component{\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  render(){\r\n    const {searchField, onSearchChange, robots, isPending} = this.props\r\n  \r\n    const filteredRobots = robots.filter(robot=>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n  \r\n    return(\r\n      <div>\r\n        {\r\n        (isPending)? <h1>Loading....</h1> :\r\n        <div style={{padding:\"5px\"}} >\r\n          <Header/>\r\n          <SearchBox searchHandler={onSearchChange}/>\r\n          <Scroll >\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\r\n  CHANGE_SEARCH_FIELD ,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\"\r\n\r\nexport const setSearchField = (text) =>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  }) /* The () means the function is calling itself*/\r\n\r\n  // export const requestRobots = () => (dispatch) =>{}\r\n\r\nexport const requestRobots = () => (dispatch)=>{\r\n  dispatch({type:REQUEST_ROBOTS_PENDING})\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response=>response.json())\r\n    .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","import {\r\n  CHANGE_SEARCH_FIELD ,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\"\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchFieldState = (state=initialStateSearch, action={}) => {\r\n  switch(action.type){\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField:action.payload})\r\n      // return {...state, ...{searchField: action.payload}}\r\n    default:\r\n      return state; \r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const robotsState = (state=initialStateRobots, action={})=>{\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots:action.payload, isPending: false});\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending:false});\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport { Provider} from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './containers/App';\r\nimport { searchFieldState, robotsState} from './reducers';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchFieldState, robotsState})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n  <App /> \r\n</Provider>,\r\ndocument.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorkerRegistration.unregister();\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}